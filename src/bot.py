import logging
import sqlite3
from datetime import datetime
from dateutil import parser
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
from apscheduler.schedulers.background import BackgroundScheduler
import pytz

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_NAME = 1
WAITING_BIRTHDAY = 2

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7516274502:AAEraGsLf7MZ0_KvsqcAG65uoYVP3bchu7k"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('birthdays.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS birthdays
        (user_id INTEGER, person_name TEXT, birthday DATE)
    ''')
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è. üëã\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è."
    )

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
def add_birthday(update: Update, context: CallbackContext):
    update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞:")
    return WAITING_NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
def process_name(update: Update, context: CallbackContext):
    context.user_data['name'] = update.message.text
    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    return WAITING_BIRTHDAY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
def process_birthday(update: Update, context: CallbackContext):
    try:
        birthday = parser.parse(update.message.text, dayfirst=True)
        name = context.user_data['name']
        
        conn = sqlite3.connect('birthdays.db')
        c = conn.cursor()
        c.execute(
            "INSERT INTO birthdays (user_id, person_name, birthday) VALUES (?, ?, ?)",
            (update.effective_user.id, name, birthday.strftime('%Y-%m-%d'))
        )
        conn.commit()
        conn.close()

        update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} - {birthday.strftime('%d.%m.%Y')}. "
            f"–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ–± —ç—Ç–æ–º –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ 9:00 —É—Ç—Ä–∞! üéâ"
        )
        return ConversationHandler.END
    except ValueError:
        update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        return WAITING_BIRTHDAY

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
def list_birthdays(update: Update, context: CallbackContext):
    conn = sqlite3.connect('birthdays.db')
    c = conn.cursor()
    c.execute(
        "SELECT person_name, birthday FROM birthdays WHERE user_id = ?",
        (update.effective_user.id,)
    )
    birthdays = c.fetchall()
    conn.close()

    if not birthdays:
        update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")
        return

    message = "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
    for name, birthday in birthdays:
        birthday_date = datetime.strptime(birthday, '%Y-%m-%d')
        message += f"üéÇ {name}: {birthday_date.strftime('%d.%m.%Y')}\n"
    
    update.message.reply_text(message)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def check_birthdays(context: CallbackContext):
    try:
        conn = sqlite3.connect('birthdays.db')
        c = conn.cursor()
        today = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%m-%d')
        
        c.execute(
            "SELECT user_id, person_name, birthday FROM birthdays"
        )
        birthdays = c.fetchall()
        conn.close()

        for user_id, name, birthday in birthdays:
            birthday_date = datetime.strptime(birthday, '%Y-%m-%d')
            if birthday_date.strftime('%m-%d') == today:
                age = datetime.now().year - birthday_date.year
                context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}! "
                         f"–ï–º—É/–µ–π –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è {age} –ª–µ—Ç! "
                         f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å! üéÇ"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")

def error_handler(update: Update, context: CallbackContext):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update:
        update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()

        # –°–æ–∑–¥–∞–Ω–∏–µ updater –∏ dispatcher
        updater = Updater(BOT_TOKEN)
        dp = updater.dispatcher

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞
        commands = [
            ('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
            ('add', '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'),
            ('list', '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è'),
            ('cancel', '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
        ]
        updater.bot.set_my_commands(commands)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('add', add_birthday)],
            states={
                WAITING_NAME: [MessageHandler(Filters.text & ~Filters.command, process_name)],
                WAITING_BIRTHDAY: [MessageHandler(Filters.text & ~Filters.command, process_birthday)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )

        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("list", list_birthdays))
        dp.add_handler(conv_handler)
        dp.add_error_handler(error_handler)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
        scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Moscow'))
        scheduler.add_job(
            check_birthdays,
            'cron',
            hour=9,
            minute=0,
            args=[updater.dispatcher]
        )
        scheduler.start()

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main() 