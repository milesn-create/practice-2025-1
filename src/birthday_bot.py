import sqlite3
import schedule
import time
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize database
conn = sqlite3.connect('birthdays.db', check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS birthdays
             (id INTEGER PRIMARY KEY AUTOINCREMENT,
              name TEXT NOT NULL,
              date TEXT NOT NULL)''')
conn.commit()

class BirthdayBot:
    def __init__(self):
        self.waiting_for_name = {}
        self.waiting_for_date = {}
        logger.info('BirthdayBot initialized')

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f'Start command from user {update.effective_user.id}')
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            ['/start'],
            ['/add', '/list'],
            ['/delete'],
            ['/cancel']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üåü <b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
            "–Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è \n"
            "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –ª—é–¥—è—Ö –∏ –≤–æ–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –∫–æ–≥–æ —Å—Ç–æ–∏—Ç –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å üéÇüíå\n\n"
            "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å:\n"
            "‚Ä¢ üë§ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî /add\n"
            "‚Ä¢ üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ‚Äî /list\n"
            "‚Ä¢ üóë –£–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî /delete\n"
            "‚Ä¢ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚Äî /cancel\n\t"
            "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–º üòå\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ ‚Äî –∏ —è –≤—Å—ë –ø–æ–¥—Å–∫–∞–∂—É!",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f'Add command from chat {update.effective_chat.id}')
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞:')
        self.waiting_for_name[update.effective_chat.id] = True

    async def handle_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        logger.info(f'Handling name input from chat {chat_id}')
        if chat_id in self.waiting_for_name:
            name = update.message.text
            self.waiting_for_name.pop(chat_id)
            self.waiting_for_date[chat_id] = name
            await update.message.reply_text(
                f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:',
                reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏
            )
        else:
            logger.warning(f'Unexpected message in handle_name from chat {chat_id}')
            await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')

    async def handle_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        logger.info(f'Handling date input from chat {chat_id}')
        if chat_id in self.waiting_for_date:
            date_str = update.message.text
            try:
                datetime.strptime(date_str, '%d.%m.%Y')
                name = self.waiting_for_date.pop(chat_id)
                c.execute('INSERT INTO birthdays (name, date) VALUES (?, ?)', (name, date_str))
                conn.commit()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
                keyboard = [
                    ['/add', '/list'],
                    ['/delete']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f'–î–æ–±–∞–≤–ª–µ–Ω–æ: {name} ({date_str})',
                    reply_markup=reply_markup
                )
                logger.info(f'Successfully added birthday for {name}: {date_str}')
            except ValueError:
                logger.warning(f'Invalid date format from chat {chat_id}')
                await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.')
        else:
            logger.warning(f'Unexpected message in handle_date from chat {chat_id}')
            await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')

    async def list_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f'List command from chat {update.effective_chat.id}')
        c.execute('SELECT name, date FROM birthdays ORDER BY date')
        birthdays = c.fetchall()
        if birthdays:
            response = '–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n'
            for name, date in birthdays:
                response += f'{name}: {date}\n'
        else:
            response = '–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç.'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        keyboard = [
            ['/add', '/list'],
            ['/delete']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(response, reply_markup=reply_markup)

    async def delete_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f'Delete command from chat {update.effective_chat.id}')
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, —á–µ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:')
        self.waiting_for_name[update.effective_chat.id] = 'delete'

    async def handle_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        logger.info(f'Handling delete input from chat {chat_id}')
        if chat_id in self.waiting_for_name and self.waiting_for_name[chat_id] == 'delete':
            name = update.message.text
            self.waiting_for_name.pop(chat_id)
            c.execute('SELECT id FROM birthdays WHERE name = ?', (name,))
            result = c.fetchone()
            if result:
                c.execute('DELETE FROM birthdays WHERE id = ?', (result[0],))
                conn.commit()
                await update.message.reply_text(f'–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} —É–¥–∞–ª–µ–Ω.')
                logger.info(f'Successfully deleted birthday for {name}')
            else:
                await update.message.reply_text(f'–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                logger.warning(f'Failed to delete birthday for {name}')
        else:
            logger.warning(f'Unexpected message in handle_delete from chat {chat_id}')
            await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        logger.info(f'Cancel command from chat {chat_id}')
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if chat_id in self.waiting_for_name:
            self.waiting_for_name.pop(chat_id)
        if chat_id in self.waiting_for_date:
            self.waiting_for_date.pop(chat_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            ['/start'],
            ['/add', '/list'],
            ['/delete'],
            ['/cancel']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=reply_markup)

    async def check_birthdays(self, context: ContextTypes.DEFAULT_TYPE):
        today = datetime.now().strftime('%d.%m')
        c.execute('SELECT name, date FROM birthdays')
        birthdays = c.fetchall()
        for name, date in birthdays:
            if date[:5] == today:  # Compare only day and month
                logger.info(f'Birthday reminder for {name} today')
                await context.bot.send_message(
                    chat_id=context.job.chat_id,
                    text=f'üéâ –£—Ä–∞! –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω—É–µ—Ç {name}! üéÇ'
                )

def main():
    bot = BirthdayBot()
    
    # Replace 'YOUR_BOT_TOKEN' with your actual bot token from BotFather
    application = Application.builder().token('8018148613:AAGl7IcDoFd1AV0dCVlGd7fH20iUCgA8Mpc').build()
    
    # Add handlers
    application.add_handler(CommandHandler('start', bot.start))
    application.add_handler(CommandHandler('add', bot.add_birthday))
    application.add_handler(CommandHandler('list', bot.list_birthdays))
    application.add_handler(CommandHandler('delete', bot.delete_birthday))
    application.add_handler(CommandHandler('cancel', bot.cancel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        logger.info(f'Handling text message from chat {chat_id}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∏–º—è
        if chat_id in bot.waiting_for_name:
            if bot.waiting_for_name[chat_id] == 'delete':
                await bot.handle_delete(update, context)
            else:
                await bot.handle_name(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –¥–∞—Ç—É
        if chat_id in bot.waiting_for_date:
            await bot.handle_date(update, context)
            return
        
        # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –Ω–∏—á–µ–≥–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É
        if update.message.text.startswith('/'):
            await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')
            return
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è/–¥–∞—Ç–∞
        await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # Schedule birthday check at 9:00 AM
    schedule.every().day.at("09:00").do(bot.check_birthdays)
    
    # Start the bot
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # Run the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)
    
    # Start schedule loop
    while True:
        schedule.run_pending()
        time.sleep(1)
    
    # Start the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
